Linux distributions: centos, redhat, amazon linux, debian , fedora, kali linux .....

Shell scripting:

30 linux commads:

networking protocals: tcp, udp, tfp, smtp

aws global infrastructure : ex: how many regions and availability zones in each region

AWS Global services: cloudfront, iam and route53

vpc:

public subnet
private subnet
nat gateway
internetgateway
NACL's
vpc endpoint
vpc endpoint service 
eni - elastic network interface
elastic ip

IAM:
iam role
instance profile
aws managed policy
inline policy
assume role
iam users
create one iam user - get the accesskey and secret key

                                      
s3 bucket:

static website hosting 
object versioning 
s3 life cylce rules
replication rule - to copy files one account s3 to other account s3
cors - cross-origin resource sharing (CORS) 
s3 bucket policy
s3 lens
s3 access points
s3 presinged urls

work: 
attach s3 bucket to ec2 instance?  Created
upload resume to s3 and access as website endpoint ? Done
login to aws control tower account with sso url?
eks private cluster vpc endppoints?
eks cluser and nodegroup creation ?


EC2:
Public ec2
private ec2
autoscaling groups
userdata
loadbalancers - alb, nlb and elb

EBS: 

work:
create EBS and attach to ec2 instance? done
resize(increase the EBS size, but once incresed you can not decrese the size)   "done"
Is EBS region service and availability zone specific?


EFS:
work:
create an efs and attach to ec2 instance? "just created but not attached to EC2"


amazlinx - ec2-user
centos - centos

cloudfront
global services
iam role - policies
interface & gateway endpoints
s3 static website hosting


{
  aws configure:
  AWS Access Key ID [None]: Aws-cli
  AWS Secret Access Key [None]: Aws-cli-1234
  Default region name [None]: us-east-1
  Default output format [None]: yaml
                                      }
    
    1/30/23
docker images
docker container
docker volumes

open SSL
crete Autoscaling group using  AWS C.F


VPC flow logs
CloudWatch Logs
Cloudtrail
Eks

{
ControlTower - Landing Zone - Account Factory - Service Catalog
Sandbox OU(Organization Units)
Security OU(Organization Units)
Service control polices 
Guard rails 
AWS sso
}
Active Directory



#============================================================================#
  # Control plane security group
  #============================================================================#

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the elastic network interfaces between the control plane and the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"

  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  ControlPlaneEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  #============================================================================#
  # Worker nodes security group
  # Note: default egress rule (allow all traffic to all destinations) applies
  #============================================================================#

  WorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WorkerNodesSecurityGroup"
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"
  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: "-1"
  WorkerNodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  WorkerNodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
